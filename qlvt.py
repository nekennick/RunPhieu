import sys
import pythoncom
import win32com.client
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QPushButton, QLabel,
    QListWidget, QListWidgetItem, QCheckBox, QHBoxLayout,
    QLineEdit, QFormLayout, QDialog, QDialogButtonBox
)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
import os

REPLACEMENT_FILE = "replacements.txt"

class ReplaceWorker(QThread):
    finished = pyqtSignal(str)
    def __init__(self, doc_names, replacements, parent=None):
        super().__init__(parent)
        self.doc_names = doc_names
        self.replacements = replacements

    def run(self):
        import pythoncom
        import win32com.client
        pythoncom.CoInitialize()
        try:
            word_app = win32com.client.GetActiveObject("Word.Application")
            for i in range(word_app.Documents.Count):
                doc = word_app.Documents.Item(i + 1)
                if doc.Name in self.doc_names:
                    try:
                        # L·ªçc t·∫•t c·∫£ c√°c b·∫£ng ·ªü trang ƒë·∫ßu ti√™n
                        tables_on_first_page = [table for table in doc.Tables if table.Range.Information(3) == 1]
                        if tables_on_first_page:
                            table = tables_on_first_page[-1]  # b·∫£ng cu·ªëi c√πng tr√™n trang ƒë·∫ßu
                            for row in table.Rows:
                                for cell in row.Cells:
                                    print(f"[DEBUG] Cell: {repr(cell.Range.Text)}")
                                    for old, new in self.replacements:
                                        if old in cell.Range.Text:
                                            print(f"[DEBUG] Found '{old}' in cell!")
                                            # Thay th·∫ø b·∫±ng c√°ch t√¨m v·ªã tr√≠ v√† thay th·∫ø tr·ª±c ti·∫øp
                                            cell_range = cell.Range
                                            start_pos = cell_range.Start
                                            end_pos = cell_range.End
                                            search_range = doc.Range(start_pos, end_pos)
                                            search_range.Find.Text = old
                                            if search_range.Find.Execute():
                                                search_range.Text = new
                    except Exception as e:
                        print(f"[DEBUG] Exception in replace: {e}")
            self.finished.emit("‚úÖ ƒê√£ thay th·∫ø xong c√°c t√†i li·ªáu ƒë∆∞·ª£c ch·ªçn.")
        except Exception as e:
            self.finished.emit(f"L·ªói thay th·∫ø: {e}")
        finally:
            pythoncom.CoUninitialize()

class WordProcessorApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Word File Processor")
        self.setGeometry(200, 200, 600, 400)  # TƒÉng k√≠ch th∆∞·ªõc c·ª≠a s·ªï m·∫∑c ƒë·ªãnh

        self.layout = QVBoxLayout()

        self.status_label = QLabel("Danh s√°ch t√†i li·ªáu Word ƒëang m·ªü:")
        self.layout.addWidget(self.status_label)

        self.file_list = QListWidget()
        self.layout.addWidget(self.file_list)

        button_layout = QHBoxLayout()
        self.refresh_button = QPushButton("T·∫£i l·∫°i danh s√°ch")
        self.refresh_button.clicked.connect(self.load_open_documents)
        button_layout.addWidget(self.refresh_button)

        self.process_button = QPushButton("X·ª≠ l√Ω c√°c file ƒë√£ ch·ªçn")
        self.process_button.clicked.connect(self.process_selected_files)
        button_layout.addWidget(self.process_button)

        # Th√™m n√∫t Replace
        self.replace_button = QPushButton("Thay th·∫ø c·ª•m t·ª´")
        self.replace_button.clicked.connect(self.replace_selected_files)
        button_layout.addWidget(self.replace_button)

        self.layout.addLayout(button_layout)
        self.setLayout(self.layout)

        # üîÑ G·ªåI NGAY khi kh·ªüi ƒë·ªông ƒë·ªÉ t·ª± ƒë·ªông t·∫£i danh s√°ch t√†i li·ªáu ƒëang m·ªü
        self.load_open_documents()

    def load_open_documents(self):
        self.file_list.clear()
        pythoncom.CoInitialize()
        try:
            word_app = win32com.client.GetActiveObject("Word.Application")
            docs = word_app.Documents
            for i in range(docs.Count):
                doc = docs.Item(i + 1)
                item_text = doc.Name
                item = QListWidgetItem(item_text)
                item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
                item.setCheckState(Qt.Unchecked)
                self.file_list.addItem(item)
        except Exception as e:
            self.status_label.setText(f"L·ªói: {e}")
        finally:
            pythoncom.CoUninitialize()

    def process_selected_files(self):
        selected_files = []
        for i in range(self.file_list.count()):
            item = self.file_list.item(i)
            if item.checkState() == Qt.Checked:
                selected_files.append(item.text())

        if not selected_files:
            self.status_label.setText("‚ö†Ô∏è B·∫°n ch∆∞a ch·ªçn t√†i li·ªáu n√†o ƒë·ªÉ x·ª≠ l√Ω.")
            return

        pythoncom.CoInitialize()
        try:
            word_app = win32com.client.GetActiveObject("Word.Application")
            for i in range(word_app.Documents.Count):
                doc = word_app.Documents.Item(i + 1)
                if doc.Name in selected_files:
                    self.modify_document(doc)
            self.status_label.setText("‚úÖ ƒê√£ x·ª≠ l√Ω xong c√°c t√†i li·ªáu ƒë∆∞·ª£c ch·ªçn.")
        except Exception as e:
            self.status_label.setText(f"L·ªói x·ª≠ l√Ω: {e}")
        finally:
            pythoncom.CoUninitialize()

    def replace_in_first_page(self, doc, replacements):
        try:
            for para in doc.Paragraphs:
                if para.Range.Information(3) == 1:  # Trang ƒë·∫ßu ti√™n
                    for old, new in replacements:
                        para.Range.Text = para.Range.Text.replace(old, new)
            # Thay th·∫ø trong b·∫£ng ·ªü trang ƒë·∫ßu ti√™n (n·∫øu c√≥)
            for table in doc.Tables:
                if table.Range.Information(3) == 1:
                    for row in table.Rows:
                        for cell in row.Cells:
                            for old, new in replacements:
                                cell.Range.Text = cell.Range.Text.replace(old, new)
        except Exception as e:
            pass

    def modify_document(self, doc):
        try:
            # L·ªçc ra t·∫•t c·∫£ c√°c b·∫£ng n·∫±m ·ªü trang ƒë·∫ßu ti√™n (page 1)
            tables_on_first_page = [table for table in doc.Tables if table.Range.Information(3) == 1]
            print(f"[DEBUG] S·ªë b·∫£ng tr√™n trang ƒë·∫ßu: {len(tables_on_first_page)}")
            if tables_on_first_page:
                # Ch·ªâ l·∫•y b·∫£ng CU·ªêI C√ôNG ·ªü trang ƒë·∫ßu ti√™n (b·∫£ng k√Ω t√™n)
                table = tables_on_first_page[-1]
                rows = table.Rows.Count
                print(f"[DEBUG] S·ªë row tr∆∞·ªõc khi ch√®n: {rows}")
                if rows == 4:
                    # ‚ö†Ô∏è CH√àN 1 D√íNG v√†o gi·ªØa d√≤ng 3 v√† 4
                    table.Rows.Add(BeforeRow=table.Rows(4))
                    print(f"[DEBUG] ƒê√£ ch√®n 1 row, s·ªë row sau khi ch√®n: {table.Rows.Count}")
                # ‚úÖ Ti·∫øp t·ª•c x·ª≠ l√Ω n·ªôi dung sau khi th√™m d√≤ng
                try:
                    table.Cell(1, 3).Range.Text = ""  # Xo√° "NG∆Ø·ªúI L·∫¨P PHI·∫æU"
                    # KH√îNG X√ìA √î "V√ï THANH ƒêI·ªÄN" n·ªØa ƒë·ªÉ tr√°nh b·∫£ng b·ªã tr√†n
                    table.Cell(1, 3).Merge(table.Cell(1, 4))  # G·ªôp √¥ (1,3) v√† (1,4)
                    table.Cell(5, 3).Merge(table.Cell(5, 4))  # G·ªôp √¥ (5,3) v√† (5,4)
                    table.Cell(5, 3).Range.Text = ""  # Xo√° "V√ï THANH ƒêI·ªÄN"
                except:
                    pass
        except Exception as e:
            print(f"[DEBUG] Exception in modify_document: {e}")

    def replace_selected_files(self):
        dialog = ReplaceDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            replacements = dialog.get_pairs()
            selected_files = []
            for i in range(self.file_list.count()):
                item = self.file_list.item(i)
                if item.checkState() == Qt.Checked:
                    selected_files.append(item.text())
            if not selected_files:
                self.status_label.setText("‚ö†Ô∏è B·∫°n ch∆∞a ch·ªçn t√†i li·ªáu n√†o ƒë·ªÉ thay th·∫ø.")
                return
            self.status_label.setText("‚è≥ ƒêang thay th·∫ø, vui l√≤ng ch·ªù...")
            self.replace_thread = ReplaceWorker(selected_files, replacements)
            self.replace_thread.finished.connect(self.on_replace_finished)
            self.replace_thread.start()

    def on_replace_finished(self, message):
        self.status_label.setText(message)

    
            

class ReplaceDialog(QDialog):
    def __init__(self, parent=None, replace_callback=None):
        super().__init__(parent)
        self.setWindowTitle("Nh·∫≠p c√°c c·∫∑p c·ª•m t·ª´ c·∫ßn thay th·∫ø")
        self.layout = QVBoxLayout()
        self.form_layout = QFormLayout()
        self.pair_edits = []
        for i in range(5):  # Cho ph√©p nh·∫≠p t·ªëi ƒëa 5 c·∫∑p
            old_edit = QLineEdit()
            new_edit = QLineEdit()
            self.form_layout.addRow(f"T·ª´ c≈© {i+1}", old_edit)
            self.form_layout.addRow(f"T·ª´ m·ªõi {i+1}", new_edit)
            self.pair_edits.append((old_edit, new_edit))
        self.layout.addLayout(self.form_layout)
        self.button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        self.button_box.accepted.connect(self.on_ok_clicked)
        self.button_box.rejected.connect(self.reject)
        self.layout.addWidget(self.button_box)
        # Th√™m n√∫t Thay th·∫ø
        self.replace_button = QPushButton("Thay th·∫ø")
        self.replace_button.clicked.connect(self.on_replace_clicked)
        self.layout.addWidget(self.replace_button)
        self.setLayout(self.layout)
        self.load_pairs_from_file()
        self.replace_callback = replace_callback

    def load_pairs_from_file(self):
        if os.path.exists(REPLACEMENT_FILE):
            try:
                with open(REPLACEMENT_FILE, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                for i, line in enumerate(lines):
                    if i >= 5:
                        break
                    parts = line.strip().split('=>', 1)
                    if len(parts) == 2:
                        self.pair_edits[i][0].setText(parts[0])
                        self.pair_edits[i][1].setText(parts[1])
            except Exception:
                pass

    def save_pairs_to_file(self):
        pairs = self.get_pairs()
        try:
            with open(REPLACEMENT_FILE, 'w', encoding='utf-8') as f:
                for old, new in pairs:
                    f.write(f"{old}=>{new}\n")
        except Exception:
            pass

    def on_ok_clicked(self):
        self.save_pairs_to_file()
        self.accept()

    def on_replace_clicked(self):
        self.save_pairs_to_file()
        if self.replace_callback:
            self.replace_callback(self.get_pairs())
        self.accept()

    def get_pairs(self):
        pairs = []
        for old_edit, new_edit in self.pair_edits:
            old = old_edit.text().strip()
            new = new_edit.text().strip()
            if old:
                pairs.append((old, new))
        return pairs

    

   


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = WordProcessorApp()
    window.show()
    sys.exit(app.exec_())
