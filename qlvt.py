import sys
import pythoncom
import win32com.client
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QPushButton, QLabel,
    QListWidget, QListWidgetItem, QCheckBox, QHBoxLayout,
    QLineEdit, QFormLayout, QDialog, QDialogButtonBox, QFileDialog,
    QScrollArea, QMessageBox
)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
import os

REPLACEMENT_FILE = "replacements.txt"

class ReplaceWorker(QThread):
    finished = pyqtSignal(str)
    def __init__(self, doc_names, replacements, parent=None):
        super().__init__(parent)
        self.doc_names = doc_names
        self.replacements = replacements

    def run(self):
        import pythoncom
        import win32com.client
        pythoncom.CoInitialize()
        try:
            word_app = win32com.client.GetActiveObject("Word.Application")
            for i in range(word_app.Documents.Count):
                doc = word_app.Documents.Item(i + 1)
                if doc.Name in self.doc_names:
                    try:
                        # L·ªçc t·∫•t c·∫£ c√°c b·∫£ng ·ªü trang ƒë·∫ßu ti√™n
                        tables_on_first_page = [table for table in doc.Tables if table.Range.Information(3) == 1]
                        print(f"[DEBUG] T·ªïng s·ªë b·∫£ng tr√™n trang ƒë·∫ßu: {len(tables_on_first_page)}")
                        if tables_on_first_page:
                            # X·ª≠ l√Ω t·∫•t c·∫£ c√°c b·∫£ng tr√™n trang ƒë·∫ßu ti√™n
                            for table_idx, table in enumerate(tables_on_first_page):
                                print(f"[DEBUG] ===== ƒêang x·ª≠ l√Ω B·∫£ng {table_idx + 1} =====")
                                print(f"[DEBUG] S·ªë row trong b·∫£ng {table_idx + 1}: {table.Rows.Count}")
                                print(f"[DEBUG] S·ªë column trong b·∫£ng {table_idx + 1}: {table.Columns.Count}")
                                
                                try:
                                    # S·ª≠ d·ª•ng Range.Cells ƒë·ªÉ tr√°nh l·ªói v·ªõi merged cells
                                    for cell_idx, cell in enumerate(table.Range.Cells):
                                        cell_text = cell.Range.Text.strip()
                                        if cell_text:  # Ch·ªâ in cell c√≥ n·ªôi dung
                                            print(f"[DEBUG] B·∫£ng{table_idx+1} - Cell {cell_idx+1}: '{cell_text}'")
                                            
                                            for old, new in self.replacements:
                                                if old in cell_text:
                                                    print(f"[DEBUG] ‚úì Found '{old}' in B·∫£ng{table_idx+1} - Cell {cell_idx+1}!")
                                                    try:
                                                        # Thay th·∫ø b·∫±ng c√°ch t√¨m v·ªã tr√≠ v√† thay th·∫ø tr·ª±c ti·∫øp
                                                        cell_range = cell.Range
                                                        start_pos = cell_range.Start
                                                        end_pos = cell_range.End
                                                        search_range = doc.Range(start_pos, end_pos)
                                                        search_range.Find.Text = old
                                                        if search_range.Find.Execute():
                                                            search_range.Text = new
                                                            print(f"[DEBUG] ‚úì Replaced '{old}' with '{new}' in B·∫£ng{table_idx+1} - Cell {cell_idx+1}")
                                                        else:
                                                            print(f"[DEBUG] ‚úó Find.Execute() failed for '{old}' in B·∫£ng{table_idx+1} - Cell {cell_idx+1}")
                                                    except Exception as e:
                                                        print(f"[DEBUG] ‚úó Exception replacing '{old}' in B·∫£ng{table_idx+1} - Cell {cell_idx+1}: {e}")
                                                else:
                                                    print(f"[DEBUG] - NOT found '{old}' in B·∫£ng{table_idx+1} - Cell {cell_idx+1}")
                                except Exception as e:
                                    print(f"[DEBUG] Exception processing B·∫£ng{table_idx+1}: {e}")
                                    # Fallback: th·ª≠ c√°ch kh√°c n·∫øu c√≥ l·ªói
                                    try:
                                        for old, new in self.replacements:
                                            # Thay th·∫ø trong to√†n b·ªô Range c·ªßa b·∫£ng
                                            table_range = table.Range
                                            table_range.Find.Text = old
                                            table_range.Find.Replacement.Text = new
                                            if table_range.Find.Execute(Replace=2, Forward=True):
                                                print(f"[DEBUG] ‚úì Replaced '{old}' with '{new}' in B·∫£ng{table_idx+1} (fallback method)")
                                    except Exception as e2:
                                        print(f"[DEBUG] Fallback also failed for B·∫£ng{table_idx+1}: {e2}")
                    except Exception as e:
                        print(f"[DEBUG] Exception in replace: {e}")
            self.finished.emit("‚úÖ ƒê√£ thay th·∫ø xong c√°c t√†i li·ªáu ƒë∆∞·ª£c ch·ªçn.")
        except Exception as e:
            self.finished.emit(f"L·ªói thay th·∫ø: {e}")
        finally:
            pythoncom.CoUninitialize()

class WordProcessorApp(QWidget):
    def __init__(self):
        super().__init__()
        self.current_version = "1.0.0"
        self.setWindowTitle(f"X·ª≠ l√Ω phi·∫øu h√†ng lo·∫°t v{self.current_version} | www.khoatran.io.vn")
        self.setGeometry(200, 200, 600, 400)  # TƒÉng k√≠ch th∆∞·ªõc c·ª≠a s·ªï m·∫∑c ƒë·ªãnh

        self.layout = QVBoxLayout()

        self.status_label = QLabel("Danh s√°ch phi·∫øu ƒëang m·ªü:")
        self.layout.addWidget(self.status_label)

        self.file_list = QListWidget()
        self.layout.addWidget(self.file_list)

        button_layout = QHBoxLayout()
        self.refresh_button = QPushButton("Load DS phi·∫øu")
        self.refresh_button.clicked.connect(self.load_open_documents)
        button_layout.addWidget(self.refresh_button)

        self.process_button = QPushButton("Thay khung k√Ω t√™n")
        self.process_button.clicked.connect(self.process_selected_files)
        button_layout.addWidget(self.process_button)

        # Th√™m n√∫t Replace
        self.replace_button = QPushButton("Thay t√™n")
        self.replace_button.clicked.connect(self.replace_selected_files)
        button_layout.addWidget(self.replace_button)

        # Th√™m n√∫t In trang ƒë·∫ßu
        self.print_button = QPushButton("In t·∫•t c·∫£ phi·∫øu")
        self.print_button.clicked.connect(self.print_first_pages)
        button_layout.addWidget(self.print_button)

        # Th√™m n√∫t Save As (cu·ªëi c√πng)
        self.save_as_button = QPushButton("L∆∞u t·∫•t c·∫£ file")
        self.save_as_button.clicked.connect(self.save_all_files_as)
        button_layout.addWidget(self.save_as_button)

        self.layout.addLayout(button_layout)
        self.setLayout(self.layout)

        # üîÑ G·ªåI NGAY khi kh·ªüi ƒë·ªông ƒë·ªÉ t·ª± ƒë·ªông t·∫£i danh s√°ch t√†i li·ªáu ƒëang m·ªü
        self.load_open_documents()

    def load_open_documents(self):
        self.file_list.clear()
        pythoncom.CoInitialize()
        try:
            word_app = win32com.client.GetActiveObject("Word.Application")
            docs = word_app.Documents
            for i in range(docs.Count):
                doc = docs.Item(i + 1)
                item_text = doc.Name
                item = QListWidgetItem(item_text)
                item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
                item.setCheckState(Qt.Checked)  # T·ª± ƒë·ªông check v√†o t·∫•t c·∫£ file
                self.file_list.addItem(item)
        except Exception as e:
            self.status_label.setText(f"L·ªói: {e}")
        finally:
            pythoncom.CoUninitialize()

    def process_selected_files(self):
        selected_files = []
        for i in range(self.file_list.count()):
            item = self.file_list.item(i)
            if item.checkState() == Qt.Checked:
                selected_files.append(item.text())

        if not selected_files:
            self.status_label.setText("‚ö†Ô∏è B·∫°n ch∆∞a ch·ªçn t√†i li·ªáu n√†o ƒë·ªÉ x·ª≠ l√Ω.")
            return

        pythoncom.CoInitialize()
        try:
            word_app = win32com.client.GetActiveObject("Word.Application")
            for i in range(word_app.Documents.Count):
                doc = word_app.Documents.Item(i + 1)
                if doc.Name in selected_files:
                    self.modify_document(doc)
            self.status_label.setText("‚úÖ ƒê√£ x·ª≠ l√Ω xong c√°c t√†i li·ªáu ƒë∆∞·ª£c ch·ªçn.")
        except Exception as e:
            self.status_label.setText(f"L·ªói x·ª≠ l√Ω: {e}")
        finally:
            pythoncom.CoUninitialize()

    def replace_in_first_page(self, doc, replacements):
        try:
            for para in doc.Paragraphs:
                if para.Range.Information(3) == 1:  # Trang ƒë·∫ßu ti√™n
                    for old, new in replacements:
                        para.Range.Text = para.Range.Text.replace(old, new)
            # Thay th·∫ø trong b·∫£ng ·ªü trang ƒë·∫ßu ti√™n (n·∫øu c√≥)
            for table in doc.Tables:
                if table.Range.Information(3) == 1:
                    for row in table.Rows:
                        for cell in row.Cells:
                            for old, new in replacements:
                                cell.Range.Text = cell.Range.Text.replace(old, new)
        except Exception as e:
            pass

    def modify_document(self, doc):
        try:
            # L·ªçc ra t·∫•t c·∫£ c√°c b·∫£ng n·∫±m ·ªü trang ƒë·∫ßu ti√™n (page 1)
            tables_on_first_page = [table for table in doc.Tables if table.Range.Information(3) == 1]
            print(f"[DEBUG] S·ªë b·∫£ng tr√™n trang ƒë·∫ßu: {len(tables_on_first_page)}")
            if tables_on_first_page:
                # Ch·ªâ l·∫•y b·∫£ng CU·ªêI C√ôNG ·ªü trang ƒë·∫ßu ti√™n (b·∫£ng k√Ω t√™n)
                table = tables_on_first_page[-1]
                rows = table.Rows.Count
                print(f"[DEBUG] S·ªë row tr∆∞·ªõc khi ch√®n: {rows}")
                if rows == 4:
                    # ‚ö†Ô∏è CH√àN 1 D√íNG v√†o gi·ªØa d√≤ng 3 v√† 4
                    table.Rows.Add(BeforeRow=table.Rows(4))
                    print(f"[DEBUG] ƒê√£ ch√®n 1 row, s·ªë row sau khi ch√®n: {table.Rows.Count}")
                # ‚úÖ Ti·∫øp t·ª•c x·ª≠ l√Ω n·ªôi dung sau khi th√™m d√≤ng
                try:
                    table.Cell(1, 3).Range.Text = ""  # Xo√° "NG∆Ø·ªúI L·∫¨P PHI·∫æU"
                    table.Cell(1, 3).Merge(table.Cell(1, 4))  # G·ªôp √¥ (1,3) v√† (1,4)
                    
                    # T√¨m √¥ ch·ª©a "V√ï THANH ƒêI·ªÄN" ·ªü h√†ng cu·ªëi c√πng
                    last_row = table.Rows.Count
                    target_cell = None
                    for col in range(1, table.Columns.Count + 1):
                        cell_text = table.Cell(last_row, col).Range.Text.strip()
                        if "V√ï THANH ƒêI·ªÄN" in cell_text:
                            # G·ªôp √¥ ch·ª©a "V√ï THANH ƒêI·ªÄN" v·ªõi √¥ b√™n ph·∫£i
                            if col < table.Columns.Count:
                                table.Cell(last_row, col).Merge(table.Cell(last_row, col + 1))
                                target_cell = table.Cell(last_row, col)  # L∆∞u √¥ ƒë√≠ch
                                target_cell.Range.Text = ""  # Xo√° "V√ï THANH ƒêI·ªÄN" sau khi ƒë√£ g·ªôp
                            break
                    
                    # T√¨m h·ªç t√™n ng∆∞·ªùi nh·∫≠n/giao h√†ng v√† ƒëi·ªÅn v√†o √¥ ƒë√≠ch
                    if target_cell:
                        print(f"[DEBUG] ƒê√£ t√¨m th·∫•y √¥ ƒë√≠ch ƒë·ªÉ ƒëi·ªÅn h·ªç t√™n")
                        ho_ten = self.find_ho_ten_nguoi_hang(doc)
                        if ho_ten:
                            target_cell.Range.Text = ho_ten
                            print(f"[DEBUG] ƒê√£ ƒëi·ªÅn h·ªç t√™n: {ho_ten}")
                        else:
                            print(f"[DEBUG] Kh√¥ng t√¨m th·∫•y h·ªç t√™n ng∆∞·ªùi nh·∫≠n/giao h√†ng")
                    else:
                        print(f"[DEBUG] Kh√¥ng t√¨m th·∫•y √¥ ƒë√≠ch (√¥ ch·ª©a V√ï THANH ƒêI·ªÄN)")
                except:
                    pass
        except Exception as e:
            print(f"[DEBUG] Exception in modify_document: {e}")

    def replace_selected_files(self):
        dialog = ReplaceDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            replacements = dialog.get_replacement_pairs()
            selected_files = []
            for i in range(self.file_list.count()):
                item = self.file_list.item(i)
                if item.checkState() == Qt.Checked:
                    selected_files.append(item.text())
            if not selected_files:
                self.status_label.setText("‚ö†Ô∏è B·∫°n ch∆∞a ch·ªçn t√†i li·ªáu n√†o ƒë·ªÉ thay th·∫ø.")
                return
            self.status_label.setText("‚è≥ ƒêang thay th·∫ø, vui l√≤ng ch·ªù...")
            self.replace_thread = ReplaceWorker(selected_files, replacements)
            self.replace_thread.finished.connect(self.on_replace_finished)
            self.replace_thread.start()

    def on_replace_finished(self, message):
        self.status_label.setText(message)

    def save_all_files_as(self):
        # Ch·ªçn th∆∞ m·ª•c ƒë√≠ch
        folder_path = QFileDialog.getExistingDirectory(self, "Ch·ªçn th∆∞ m·ª•c l∆∞u file")
        if not folder_path:
            return

        selected_files = []
        for i in range(self.file_list.count()):
            item = self.file_list.item(i)
            if item.checkState() == Qt.Checked:
                selected_files.append(item.text())

        if not selected_files:
            self.status_label.setText("‚ö†Ô∏è B·∫°n ch∆∞a ch·ªçn t√†i li·ªáu n√†o ƒë·ªÉ l∆∞u.")
            return

        self.status_label.setText("‚è≥ ƒêang l∆∞u file, vui l√≤ng ch·ªù...")
        self.save_thread = SaveAsWorker(selected_files, folder_path)
        self.save_thread.finished.connect(self.on_save_finished)
        self.save_thread.start()

    def on_save_finished(self, message):
        self.status_label.setText(message)

    def print_first_pages(self):
        selected_files = []
        for i in range(self.file_list.count()):
            item = self.file_list.item(i)
            if item.checkState() == Qt.Checked:
                selected_files.append(item.text())

        if not selected_files:
            self.status_label.setText("‚ö†Ô∏è B·∫°n ch∆∞a ch·ªçn t√†i li·ªáu n√†o ƒë·ªÉ in.")
            return

        self.status_label.setText("‚è≥ ƒêang in trang ƒë·∫ßu, vui l√≤ng ch·ªù...")
        self.print_thread = PrintWorker(selected_files)
        self.print_thread.finished.connect(self.on_print_finished)
        self.print_thread.start()

    def on_print_finished(self, message):
        self.status_label.setText(message)

    def find_ho_ten_nguoi_hang(self, doc):
        """T√¨m h·ªç t√™n ng∆∞·ªùi nh·∫≠n/giao h√†ng trong document"""
        try:
            print(f"[DEBUG] B·∫Øt ƒë·∫ßu t√¨m h·ªç t√™n ng∆∞·ªùi nh·∫≠n/giao h√†ng...")
            # T√¨m trong t·∫•t c·∫£ c√°c b·∫£ng
            for table_idx, table in enumerate(doc.Tables):
                print(f"[DEBUG] Ki·ªÉm tra b·∫£ng {table_idx + 1}")
                try:
                    # S·ª≠ d·ª•ng Range.Cells ƒë·ªÉ tr√°nh l·ªói v·ªõi merged cells
                    for cell_idx, cell in enumerate(table.Range.Cells):
                        cell_text = cell.Range.Text.strip()
                        if cell_text:  # Ch·ªâ in cell c√≥ n·ªôi dung
                            print(f"[DEBUG] B·∫£ng{table_idx+1} - Cell {cell_idx+1}: '{cell_text}'")
                        
                        # T√¨m "H·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n h√†ng:"
                        if "H·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n h√†ng:" in cell_text:
                            print(f"[DEBUG] T√¨m th·∫•y 'H·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n h√†ng:' trong cell {cell_idx+1}")
                            # Tr√≠ch xu·∫•t h·ªç t√™n sau d·∫•u ":"
                            parts = cell_text.split("H·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n h√†ng:")
                            if len(parts) > 1:
                                ho_ten_part = parts[1].strip()
                                # C·∫Øt h·ªç t√™n ƒë·∫øn d·∫•u xu·ªëng d√≤ng ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát
                                ho_ten = self.extract_ho_ten(ho_ten_part)
                                if ho_ten:
                                    print(f"[DEBUG] Tr√≠ch xu·∫•t ƒë∆∞·ª£c h·ªç t√™n ng∆∞·ªùi nh·∫≠n: '{ho_ten}'")
                                    return ho_ten
                                else:
                                    print(f"[DEBUG] H·ªç t√™n ng∆∞·ªùi nh·∫≠n tr·ªëng")
                            else:
                                print(f"[DEBUG] Kh√¥ng th·ªÉ tr√≠ch xu·∫•t h·ªç t√™n ng∆∞·ªùi nh·∫≠n")
                        # T√¨m "H·ªç v√† t√™n ng∆∞·ªùi giao h√†ng:"
                        elif "H·ªç v√† t√™n ng∆∞·ªùi giao h√†ng:" in cell_text:
                            print(f"[DEBUG] T√¨m th·∫•y 'H·ªç v√† t√™n ng∆∞·ªùi giao h√†ng:' trong cell {cell_idx+1}")
                            # Tr√≠ch xu·∫•t h·ªç t√™n sau d·∫•u ":"
                            parts = cell_text.split("H·ªç v√† t√™n ng∆∞·ªùi giao h√†ng:")
                            if len(parts) > 1:
                                ho_ten_part = parts[1].strip()
                                # C·∫Øt h·ªç t√™n ƒë·∫øn d·∫•u xu·ªëng d√≤ng ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát
                                ho_ten = self.extract_ho_ten(ho_ten_part)
                                if ho_ten:
                                    print(f"[DEBUG] Tr√≠ch xu·∫•t ƒë∆∞·ª£c h·ªç t√™n ng∆∞·ªùi giao: '{ho_ten}'")
                                    return ho_ten
                                else:
                                    print(f"[DEBUG] H·ªç t√™n ng∆∞·ªùi giao tr·ªëng")
                            else:
                                print(f"[DEBUG] Kh√¥ng th·ªÉ tr√≠ch xu·∫•t h·ªç t√™n ng∆∞·ªùi giao")
                except Exception as e:
                    print(f"[DEBUG] L·ªói x·ª≠ l√Ω b·∫£ng {table_idx+1}: {e}")
                    # Fallback: th·ª≠ c√°ch kh√°c n·∫øu c√≥ l·ªói
                    try:
                        table_range = table.Range
                        table_text = table_range.Text
                        print(f"[DEBUG] B·∫£ng{table_idx+1} - To√†n b·ªô n·ªôi dung: '{table_text}'")
                        
                        # T√¨m trong to√†n b·ªô text c·ªßa b·∫£ng
                        if "H·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n h√†ng:" in table_text:
                            print(f"[DEBUG] T√¨m th·∫•y 'H·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n h√†ng:' trong b·∫£ng {table_idx+1}")
                            parts = table_text.split("H·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n h√†ng:")
                            if len(parts) > 1:
                                ho_ten_part = parts[1].strip()
                                ho_ten = self.extract_ho_ten(ho_ten_part)
                                if ho_ten:
                                    print(f"[DEBUG] Tr√≠ch xu·∫•t ƒë∆∞·ª£c h·ªç t√™n ng∆∞·ªùi nh·∫≠n: '{ho_ten}'")
                                    return ho_ten
                        elif "H·ªç v√† t√™n ng∆∞·ªùi giao h√†ng:" in table_text:
                            print(f"[DEBUG] T√¨m th·∫•y 'H·ªç v√† t√™n ng∆∞·ªùi giao h√†ng:' trong b·∫£ng {table_idx+1}")
                            parts = table_text.split("H·ªç v√† t√™n ng∆∞·ªùi giao h√†ng:")
                            if len(parts) > 1:
                                ho_ten_part = parts[1].strip()
                                ho_ten = self.extract_ho_ten(ho_ten_part)
                                if ho_ten:
                                    print(f"[DEBUG] Tr√≠ch xu·∫•t ƒë∆∞·ª£c h·ªç t√™n ng∆∞·ªùi giao: '{ho_ten}'")
                                    return ho_ten
                    except Exception as e2:
                        print(f"[DEBUG] Fallback c≈©ng th·∫•t b·∫°i cho b·∫£ng {table_idx+1}: {e2}")
            
            print(f"[DEBUG] Kh√¥ng t√¨m th·∫•y trong b·∫£ng, ki·ªÉm tra paragraphs...")
            # T√¨m trong paragraphs n·∫øu kh√¥ng t√¨m th·∫•y trong b·∫£ng
            for para_idx, para in enumerate(doc.Paragraphs):
                para_text = para.Range.Text.strip()
                if para_text:  # Ch·ªâ in paragraph c√≥ n·ªôi dung
                    print(f"[DEBUG] Paragraph {para_idx + 1}: '{para_text}'")
                
                if "H·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n h√†ng:" in para_text:
                    print(f"[DEBUG] T√¨m th·∫•y 'H·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n h√†ng:' trong paragraph {para_idx + 1}")
                    parts = para_text.split("H·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n h√†ng:")
                    if len(parts) > 1:
                        ho_ten_part = parts[1].strip()
                        ho_ten = self.extract_ho_ten(ho_ten_part)
                        if ho_ten:
                            print(f"[DEBUG] Tr√≠ch xu·∫•t ƒë∆∞·ª£c h·ªç t√™n ng∆∞·ªùi nh·∫≠n t·ª´ paragraph: '{ho_ten}'")
                            return ho_ten
                elif "H·ªç v√† t√™n ng∆∞·ªùi giao h√†ng:" in para_text:
                    print(f"[DEBUG] T√¨m th·∫•y 'H·ªç v√† t√™n ng∆∞·ªùi giao h√†ng:' trong paragraph {para_idx + 1}")
                    parts = para_text.split("H·ªç v√† t√™n ng∆∞·ªùi giao h√†ng:")
                    if len(parts) > 1:
                        ho_ten_part = parts[1].strip()
                        ho_ten = self.extract_ho_ten(ho_ten_part)
                        if ho_ten:
                            print(f"[DEBUG] Tr√≠ch xu·∫•t ƒë∆∞·ª£c h·ªç t√™n ng∆∞·ªùi giao t·ª´ paragraph: '{ho_ten}'")
                            return ho_ten
            
            print(f"[DEBUG] Kh√¥ng t√¨m th·∫•y h·ªç t√™n ng∆∞·ªùi nh·∫≠n/giao h√†ng trong to√†n b·ªô document")
            return None
        except Exception as e:
            print(f"[DEBUG] L·ªói t√¨m h·ªç t√™n: {e}")
            return None

    def extract_ho_ten(self, text):
        """Tr√≠ch xu·∫•t h·ªç t√™n t·ª´ text, lo·∫°i b·ªè c√°c th√¥ng tin kh√°c"""
        try:
            # Lo·∫°i b·ªè c√°c th√¥ng tin ph√≠a sau h·ªç t√™n
            # C·∫Øt ƒë·∫øn d·∫•u xu·ªëng d√≤ng ƒë·∫ßu ti√™n
            if '\r' in text:
                text = text.split('\r')[0].strip()
            elif '\n' in text:
                text = text.split('\n')[0].strip()
            
            # Lo·∫°i b·ªè c√°c th√¥ng tin nh∆∞ "ƒê∆°n v·ªã nh·∫≠p:", "ƒê∆°n v·ªã xu·∫•t:", v.v.
            # T√¨m c√°c t·ª´ kh√≥a c√≥ th·ªÉ xu·∫•t hi·ªán sau h·ªç t√™n
            keywords_to_remove = [
                "ƒê∆°n v·ªã nh·∫≠p:"
            ]
            
            for keyword in keywords_to_remove:
                if keyword in text:
                    text = text.split(keyword)[0].strip()
                    break
            
            # Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát cu·ªëi
            text = text.rstrip('.,;:!?')
            
            return text if text else None
        except Exception as e:
            print(f"[DEBUG] L·ªói tr√≠ch xu·∫•t h·ªç t√™n: {e}")
            return None



    
            

class ReplaceDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Thay th·∫ø c·ª•m t·ª´")
        self.setModal(True)
        self.resize(500, 400)
        
        # Danh s√°ch c√°c c·∫∑p t·ª´ thay th·∫ø
        self.replacement_pairs = []
        
        # Layout ch√≠nh
        layout = QVBoxLayout()
        
        # Ti√™u ƒë·ªÅ
        title_label = QLabel("Nh·∫≠p c√°c c·∫∑p t·ª´ c·∫ßn thay th·∫ø:")
        title_label.setStyleSheet("font-weight: bold; font-size: 14px; margin-bottom: 10px;")
        layout.addWidget(title_label)
        
        # Scroll area cho danh s√°ch c√°c c·∫∑p t·ª´
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setMaximumHeight(250)
        
        # Widget ch·ª©a danh s√°ch
        self.pairs_widget = QWidget()
        self.pairs_layout = QVBoxLayout(self.pairs_widget)
        self.pairs_layout.setSpacing(5)
        
        scroll_area.setWidget(self.pairs_widget)
        layout.addWidget(scroll_area)
        
        # N√∫t th√™m c·∫∑p t·ª´ m·ªõi
        add_button = QPushButton("‚ûï Th√™m c·∫∑p t·ª´ m·ªõi")
        add_button.clicked.connect(self.add_pair)
        add_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        layout.addWidget(add_button)
        
        # N√∫t x√≥a t·∫•t c·∫£
        clear_button = QPushButton("üóëÔ∏è X√≥a t·∫•t c·∫£")
        clear_button.clicked.connect(self.clear_all_pairs)
        clear_button.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 8px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
        """)
        layout.addWidget(clear_button)
        
        # N√∫t OK v√† Cancel
        button_layout = QHBoxLayout()
        
        ok_button = QPushButton("OK")
        ok_button.clicked.connect(self.accept)
        ok_button.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        
        cancel_button = QPushButton("H·ªßy")
        cancel_button.clicked.connect(self.reject)
        cancel_button.setStyleSheet("""
            QPushButton {
                background-color: #9E9E9E;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #757575;
            }
        """)
        
        button_layout.addWidget(ok_button)
        button_layout.addWidget(cancel_button)
        layout.addLayout(button_layout)
        
        self.setLayout(layout)
        
        # T·∫£i c√°c c·∫∑p t·ª´ ƒë√£ l∆∞u
        self.load_pairs_from_file()
        
        # Th√™m √≠t nh·∫•t 1 c·∫∑p t·ª´ m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
        if not self.replacement_pairs:
            self.add_pair()
    
    def add_pair(self):
        """Th√™m m·ªôt c·∫∑p t·ª´ thay th·∫ø m·ªõi"""
        pair_widget = self.create_pair_widget()
        self.pairs_layout.addWidget(pair_widget)
        self.replacement_pairs.append(pair_widget)
    
    def create_pair_widget(self):
        """T·∫°o widget cho m·ªôt c·∫∑p t·ª´ thay th·∫ø"""
        pair_widget = QWidget()
        pair_layout = QHBoxLayout(pair_widget)
        pair_layout.setContentsMargins(5, 5, 5, 5)
        
        # Label s·ªë th·ª© t·ª±
        index_label = QLabel(f"{len(self.replacement_pairs) + 1}.")
        index_label.setMinimumWidth(30)
        index_label.setStyleSheet("font-weight: bold; color: #666;")
        pair_layout.addWidget(index_label)
        
        # √î nh·∫≠p t·ª´ c≈©
        old_edit = QLineEdit()
        old_edit.setPlaceholderText("T·ª´ c·∫ßn thay th·∫ø...")
        old_edit.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                border: 2px solid #ddd;
                border-radius: 4px;
                background-color: #fff8dc;
            }
            QLineEdit:focus {
                border-color: #ff9800;
            }
        """)
        pair_layout.addWidget(old_edit)
        
        # M≈©i t√™n
        arrow_label = QLabel("‚Üí")
        arrow_label.setStyleSheet("font-weight: bold; font-size: 16px; color: #666; margin: 0 10px;")
        pair_layout.addWidget(arrow_label)
        
        # √î nh·∫≠p t·ª´ m·ªõi
        new_edit = QLineEdit()
        new_edit.setPlaceholderText("T·ª´ thay th·∫ø...")
        new_edit.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                border: 2px solid #ddd;
                border-radius: 4px;
                background-color: #f0fff0;
            }
            QLineEdit:focus {
                border-color: #4CAF50;
            }
        """)
        pair_layout.addWidget(new_edit)
        
        # N√∫t x√≥a
        delete_button = QPushButton("‚ùå")
        delete_button.setMaximumWidth(30)
        delete_button.clicked.connect(lambda: self.remove_pair(pair_widget))
        delete_button.setStyleSheet("""
            QPushButton {
                background-color: #ff4444;
                color: white;
                border: none;
                border-radius: 15px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #cc0000;
            }
        """)
        pair_layout.addWidget(delete_button)
        
        return pair_widget
    
    def remove_pair(self, pair_widget):
        """X√≥a m·ªôt c·∫∑p t·ª´ thay th·∫ø"""
        if len(self.replacement_pairs) > 1:  # Gi·ªØ l·∫°i √≠t nh·∫•t 1 c·∫∑p
            self.pairs_layout.removeWidget(pair_widget)
            self.replacement_pairs.remove(pair_widget)
            pair_widget.deleteLater()
            self.update_index_labels()
        else:
            QMessageBox.information(self, "Th√¥ng b√°o", "Ph·∫£i c√≥ √≠t nh·∫•t 1 c·∫∑p t·ª´ thay th·∫ø!")
    
    def clear_all_pairs(self):
        """X√≥a t·∫•t c·∫£ c√°c c·∫∑p t·ª´ thay th·∫ø"""
        reply = QMessageBox.question(self, "X√°c nh·∫≠n", 
                                   "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ c√°c c·∫∑p t·ª´ thay th·∫ø?",
                                   QMessageBox.Yes | QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            # X√≥a t·∫•t c·∫£ widget
            for pair_widget in self.replacement_pairs:
                self.pairs_layout.removeWidget(pair_widget)
                pair_widget.deleteLater()
            
            self.replacement_pairs.clear()
            
            # Th√™m l·∫°i 1 c·∫∑p m·∫∑c ƒë·ªãnh
            self.add_pair()
    
    def update_index_labels(self):
        """C·∫≠p nh·∫≠t s·ªë th·ª© t·ª± cho c√°c c·∫∑p t·ª´"""
        for i, pair_widget in enumerate(self.replacement_pairs):
            index_label = pair_widget.layout().itemAt(0).widget()
            index_label.setText(f"{i + 1}.")
    
    def get_replacement_pairs(self):
        """L·∫•y danh s√°ch c√°c c·∫∑p t·ª´ thay th·∫ø"""
        pairs = []
        for pair_widget in self.replacement_pairs:
            old_edit = pair_widget.layout().itemAt(1).widget()
            new_edit = pair_widget.layout().itemAt(3).widget()
            
            old_text = old_edit.text().strip()
            new_text = new_edit.text().strip()
            
            if old_text and new_text:  # Ch·ªâ l·∫•y c√°c c·∫∑p c√≥ ƒë·ªß c·∫£ 2 t·ª´
                pairs.append((old_text, new_text))
        
        return pairs
    
    def load_pairs_from_file(self):
        """T·∫£i c√°c c·∫∑p t·ª´ t·ª´ file"""
        try:
            if os.path.exists(REPLACEMENT_FILE):
                with open(REPLACEMENT_FILE, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                # X√≥a c√°c c·∫∑p hi·ªán t·∫°i
                for pair_widget in self.replacement_pairs:
                    self.pairs_layout.removeWidget(pair_widget)
                    pair_widget.deleteLater()
                self.replacement_pairs.clear()
                
                # Th√™m c√°c c·∫∑p t·ª´ file
                for line in lines:
                    line = line.strip()
                    if '|' in line:
                        old_text, new_text = line.split('|', 1)
                        pair_widget = self.create_pair_widget()
                        self.pairs_layout.addWidget(pair_widget)
                        self.replacement_pairs.append(pair_widget)
                        
                        # ƒêi·ªÅn d·ªØ li·ªáu
                        old_edit = pair_widget.layout().itemAt(1).widget()
                        new_edit = pair_widget.layout().itemAt(3).widget()
                        old_edit.setText(old_text.strip())
                        new_edit.setText(new_text.strip())
                
                self.update_index_labels()
        except Exception as e:
            print(f"L·ªói t·∫£i file replacements: {e}")
    
    def save_pairs_to_file(self):
        """L∆∞u c√°c c·∫∑p t·ª´ v√†o file"""
        try:
            pairs = self.get_replacement_pairs()
            with open(REPLACEMENT_FILE, 'w', encoding='utf-8') as f:
                for old_text, new_text in pairs:
                    f.write(f"{old_text}|{new_text}\n")
        except Exception as e:
            print(f"L·ªói l∆∞u file replacements: {e}")
    
    def accept(self):
        """Khi nh·∫•n OK"""
        pairs = self.get_replacement_pairs()
        if not pairs:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p √≠t nh·∫•t 1 c·∫∑p t·ª´ thay th·∫ø!")
            return
        
        # L∆∞u v√†o file
        self.save_pairs_to_file()
        super().accept()

    

   


class SaveAsWorker(QThread):
    finished = pyqtSignal(str)
    def __init__(self, doc_names, folder_path, parent=None):
        super().__init__(parent)
        self.doc_names = doc_names
        self.folder_path = folder_path

    def find_so_phieu(self, doc):
        """T√¨m s·ªë phi·∫øu trong document"""
        import re
        try:
            # T√¨m pattern "S·ªë: XX.OXX.XX.XXXX"
            pattern = r'S·ªë:\s*(\d{2}\.O\d{2}\.\d{2}\.\d{4})'
            for para in doc.Paragraphs:
                match = re.search(pattern, para.Range.Text)
                if match:
                    return match.group(1)  # Tr·∫£ v·ªÅ s·ªë phi·∫øu
            # T√¨m trong b·∫£ng
            for table in doc.Tables:
                for row in table.Rows:
                    for cell in row.Cells:
                        match = re.search(pattern, cell.Range.Text)
                        if match:
                            return match.group(1)
        except Exception as e:
            print(f"[DEBUG] Exception finding so phieu: {e}")
        return None

    def run(self):
        import pythoncom
        import win32com.client
        import os
        pythoncom.CoInitialize()
        try:
            word_app = win32com.client.GetActiveObject("Word.Application")
            saved_count = 0
            for i in range(word_app.Documents.Count):
                doc = word_app.Documents.Item(i + 1)
                if doc.Name in self.doc_names:
                    try:
                        # T√¨m s·ªë phi·∫øu trong document
                        so_phieu = self.find_so_phieu(doc)
                        if so_phieu:
                            # Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng s·ªë phi·∫øu: XX.OXX.XX.XXXX -> XX.XXXX-XX
                            parts = so_phieu.split('.')
                            if len(parts) == 4:
                                # parts[0] = XX, parts[1] = OXX, parts[2] = XX, parts[3] = XXXX
                                new_format = f"{parts[2]}.{parts[3]}-{parts[0]}"
                                file_name = f"{new_format}{os.path.splitext(doc.Name)[1]}"
                            else:
                                # N·∫øu format kh√¥ng ƒë√∫ng, d√πng s·ªë phi·∫øu g·ªëc
                                file_name = f"Phieu_{so_phieu}{os.path.splitext(doc.Name)[1]}"
                        else:
                            # N·∫øu kh√¥ng t√¨m th·∫•y s·ªë phi·∫øu, d√πng t√™n g·ªëc
                            file_name = os.path.splitext(doc.Name)[0] + "_saved" + os.path.splitext(doc.Name)[1]
                        
                        file_path = os.path.join(self.folder_path, file_name)
                        # L∆∞u file v·ªõi ƒë·ªãnh d·∫°ng g·ªëc
                        doc.SaveAs(file_path)
                        saved_count += 1
                        print(f"[DEBUG] Saved: {file_name}")
                    except Exception as e:
                        print(f"[DEBUG] Exception saving {doc.Name}: {e}")
            self.finished.emit(f"‚úÖ ƒê√£ l∆∞u {saved_count} file v√†o th∆∞ m·ª•c ƒë√£ ch·ªçn.")
        except Exception as e:
            self.finished.emit(f"L·ªói l∆∞u file: {e}")
        finally:
            pythoncom.CoUninitialize()


class PrintWorker(QThread):
    finished = pyqtSignal(str)
    def __init__(self, doc_names, parent=None):
        super().__init__(parent)
        self.doc_names = doc_names

    def run(self):
        import pythoncom
        import win32com.client
        pythoncom.CoInitialize()
        try:
            word_app = win32com.client.GetActiveObject("Word.Application")
            printed_count = 0
            for i in range(word_app.Documents.Count):
                doc = word_app.Documents.Item(i + 1)
                if doc.Name in self.doc_names:
                    try:
                        # In trang ƒë·∫ßu ti√™n
                        doc.PrintOut(From=1, To=1)
                        printed_count += 1
                        print(f"[DEBUG] Printed: {doc.Name}")
                    except Exception as e:
                        print(f"[DEBUG] Exception printing {doc.Name}: {e}")
            self.finished.emit(f"‚úÖ ƒê√£ in trang ƒë·∫ßu c·ªßa {printed_count} file.")
        except Exception as e:
            self.finished.emit(f"L·ªói in file: {e}")
        finally:
            pythoncom.CoUninitialize()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = WordProcessorApp()
    window.show()
    sys.exit(app.exec_())
